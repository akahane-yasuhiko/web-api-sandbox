openapi: 3.0.1
info:
  title: User Manage Sample
  description: 'This is a sample server Petstore server.'
  termsOfService: http://swagger.io/terms/
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  version: 1.0.0
servers:
- url: http://localhost:8080
tags:
- name: user
  description: Operations about user
- name: role
  description: Operations about role
- name: menu
  description: Operations about menu
- name: user-role
  description: Operations about user and role relationships
- name: role-menu
  description: Operations about role and menu relationships
paths:
  /user:
    post:
      tags:
      - user
      summary: Create user
      operationId: createUser
      requestBody:
        description: Created user object
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/User'
        required: true
      responses:
        201:
          description: Created
          content: 
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        400:
          description: Bad Request
          content: 
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        500:
          description: Internal Server Error
          content: 
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  # /user/login:
  #   get:
  #     tags:
  #     - user
  #     summary: (Not implemented)Logs user into the system
  #     operationId: loginUser
  #     parameters:
  #     - name: username
  #       in: query
  #       description: The user name for login
  #       required: true
  #       schema:
  #         type: string
  #     - name: password
  #       in: query
  #       description: The password for login in clear text
  #       required: true
  #       schema:
  #         type: string
  #     responses:
  #       200:
  #         description: successful operation
  #         headers:
  #           X-Rate-Limit:
  #             description: calls per hour allowed by the user
  #             schema:
  #               type: integer
  #               format: int32
  #           X-Expires-After:
  #             description: date in UTC when token expires
  #             schema:
  #               type: string
  #               format: date-time
  #         content:
  #           application/json:
  #             schema:
  #               type: string
  #       400:
  #         description: Invalid username/password supplied
  #         content: {}
  # /user/logout:
  #   get:
  #     tags:
  #     - user
  #     summary: (Not implemented)Logs out current logged in user session
  #     operationId: logoutUser
  #     responses:
  #       default:
  #         description: successful operation
  #         content: {}
  /user/{username}:
    get:
      tags:
      - user
      summary: Get user by user name
      operationId: getUserByName
      parameters:
      - name: username
        in: path
        required: true
        schema:
          type: string
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        400:
          description: Invalid username supplied
          content: 
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        404:
          description: User not found
          content: 
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    put:
      tags:
      - user
      summary: Updated user
      operationId: updateUser
      parameters:
      - name: username
        in: path
        description: name that need to be updated
        required: true
        schema:
          type: string
      requestBody:
        description: Updated user object
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/User'
        required: true
      responses:
        400:
          description: Invalid user supplied
          content: 
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        404:
          description: User not found
          content: 
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      x-codegen-request-body-name: body
    delete:
      tags:
      - user
      summary: Delete user
      operationId: deleteUser
      parameters:
      - name: username
        in: path
        description: The name that needs to be deleted
        required: true
        schema:
          type: string
      responses:
        400:
          description: Invalid username supplied
          content: 
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        404:
          description: User not found
          content: 
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /role:
    post:
      tags:
      - role
      summary: Create role
      operationId: createMenu
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/Menu'
        required: true
      responses:
        201:
          description: Created
          content: 
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        400:
          description: Bad Request
          content: 
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        500:
          description: Internal Server Error
          content: 
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /role/{rolename}:
    get:
      tags:
      - role
      summary: Get role by name
      operationId: getMenuByName
      parameters:
      - name: rolename
        in: path
        required: true
        schema:
          type: string
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Menu'
        400:
          description: Invalid username supplied
          content: 
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        404:
          description: User not found
          content: 
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    put:
      tags:
      - role
      summary: Update role
      operationId: updateMenu
      parameters:
      - name: rolename
        in: path
        required: true
        schema:
          type: string
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/Menu'
        required: true
      responses:
        400:
          description: Invalid user supplied
          content: 
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        404:
          description: User not found
          content: 
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    delete:
      tags:
      - role
      summary: Delete role
      operationId: deleteMenu
      parameters:
      - name: Menuname
        in: path
        required: true
        schema:
          type: string
      responses:
        400:
          description: Invalid username supplied
          content: 
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        404:
          description: User not found
          content: 
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /menu:
    post:
      tags:
      - menu
      summary: Create menu
      operationId: createMenu
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/Menu'
        required: true
      responses:
        201:
          description: Created
          content: 
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        400:
          description: Bad Request
          content: 
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        500:
          description: Internal Server Error
          content: 
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /menu/{menuname}:
    get:
      tags:
      - menu
      summary: Get menu by name
      operationId: getMenuByName
      parameters:
      - name: menuname
        in: path
        required: true
        schema:
          type: string
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Menu'
        400:
          description: Invalid username supplied
          content: {}
        404:
          description: User not found
          content: {}
    put:
      tags:
      - menu
      summary: Update menu
      operationId: updateMenu
      parameters:
      - name: menuname
        in: path
        required: true
        schema:
          type: string
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/Menu'
        required: true
      responses:
        400:
          description: Invalid user supplied
          content: {}
        404:
          description: User not found
          content: {}
    delete:
      tags:
      - menu
      summary: Delete menu
      operationId: deleteMenu
      parameters:
      - name: Menuname
        in: path
        required: true
        schema:
          type: string
      responses:
        400:
          description: Invalid username supplied
          content: {}
        404:
          description: User not found
          content: {}
  /user-role/{username}:
    get:
      tags:
      - user-role
      summary: Get user-role relationships by user name
      operationId: getUserRoleByName
      parameters:
      - name: username
        in: path
        required: true
        schema:
          type: string
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserRole'
        400:
          description: Invalid username supplied
          content: 
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        404:
          description: User not found
          content: 
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /user-role/{username}/{rolename}:
    put:
      tags:
      - user-role
      summary: Create user and role relationsip
      operationId: createUserRole
      parameters:
      - name: username
        in: path
        required: true
        schema:
          type: string
      - name: rolename
        in: path
        required: true
        schema:
          type: string
      responses:
        204:
          description: successful operation
        400:
          description: Invalid username or rolename supplied
          content: 
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        404:
          description: User or role not found
          content: 
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    delete:
      tags:
      - user-role
      summary: Delete user and role relationship
      operationId: deleteUserRole
      parameters:
      - name: username
        in: path
        required: true
        schema:
          type: string
      - name: rolename
        in: path
        required: true
        schema:
          type: string
      responses:
        204:
          description: successful operation
        400:
          description: Invalid username or rolename supplied
          content: 
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        404:
          description: Relationship not found
          content: 
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /role-menu/{rolename}:
    get:
      tags:
      - role-menu
      summary: Get role-menu relationships by role name
      operationId: getRoleMenuByName
      parameters:
      - name: rolename
        in: path
        required: true
        schema:
          type: string
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RoleMenu'
        400:
          description: Invalid rolename supplied
          content: 
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        404:
          description: Role not found
          content: 
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /role-menu/{rolename}/{menuname}:
    put:
      tags:
      - role-menu
      summary: Create role and menu relationsip
      operationId: createRoleMenu
      parameters:
      - name: rolename
        in: path
        required: true
        schema:
          type: string
      - name: menuname
        in: path
        required: true
        schema:
          type: string
      responses:
        204:
          description: successful operation
        400:
          description: Invalid rolename or menuname supplied
          content: 
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        404:
          description: User or role not found
          content: 
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    delete:
      tags:
      - role-menu
      summary: Delete role and menu relationship
      operationId: deleteUserRole
      parameters:
      - name: rolename
        in: path
        required: true
        schema:
          type: string
      - name: menuname
        in: path
        required: true
        schema:
          type: string
      responses:
        204:
          description: successful operation
        400:
          description: Invalid username or rolename supplied
          content: 
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        404:
          description: Relationship not found
          content: 
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
components:
  schemas:
    User:
      type: object
      properties:
        user_id:
          type: string
          format: string
          maxLength: 5
          minLength: 5
        user_name:
          type: string
          maxLength: 2048
          minLength: 1
      required:
        - "user_id"
        - "user_name"
    Role:
      type: object
      properties:
        role_id:
          type: string
          format: string
          maxLength: 5
          minLength: 5
        role_name:
          type: string
          maxLength: 2048
          minLength: 1
      required:
        - "role_id"
        - "role_name"
    Menu:
      type: object
      properties:
        menu_id:
          type: string
          format: string
          maxLength: 5
          minLength: 5
        menu_name:
          type: string
          maxLength: 2048
          minLength: 1
      required:
        - "menu_id"
        - "menu_name"
    UserRole:
      type: object
      properties:
        user_id:
          type: string
          format: string
          maxLength: 5
          minLength: 5
        role_id:
          type: string
          format: string
          maxLength: 5
          minLength: 5
      required:
        - "user_id"
        - "role_id"
    RoleMenu:
      type: object
      properties:
        role_id:
          type: string
          format: string
          maxLength: 5
          minLength: 5
        menu_id:
          type: string
          format: string
          maxLength: 5
          minLength: 5
      required:
        - "role_id"
        - "menu_id"
    CreatedUrl:
      type: object
      properties:
        resource_url:
          type: string
          format: string
          maxLength: 2048
      required:
        - "resource_url:"
    ErrorResponse:
      type: object
      properties:
        code:
          type: string
          format: string
          maxLength: 8
          minLength: 8
        message:
          type: string
          maxLength: 2024
          minLength: 1
  # securitySchemes:
  #   petstore_auth:
  #     type: oauth2
  #     flows:
  #       implicit:
  #         authorizationUrl: http://petstore.swagger.io/oauth/dialog
  #         scopes:
  #           write:pets: modify pets in your account
  #           read:pets: read your pets
  #   api_key:
  #     type: apiKey
  #     name: api_key
  #     in: header
